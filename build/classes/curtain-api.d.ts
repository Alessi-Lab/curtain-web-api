import { User } from "./curtain-user";
export declare const replacer: (key: any, value: any) => any;
export declare const reviver: (key: any, value: any) => any;
export declare class CurtainWebAPI {
    loginURL: string;
    logoutURL: string;
    refereshURL: string;
    orcidLoginURL: string;
    userInfoURL: string;
    user: User;
    isRefreshing: boolean;
    axiosInstance: import("axios").AxiosInstance;
    baseURL: string;
    constructor(baseURL?: string);
    login(username: string, password: string): Promise<User>;
    getUserInfo(): Promise<User>;
    logout(): Promise<void>;
    refresh(): Promise<import("axios").AxiosResponse<any, any>>;
    ORCIDLogin(authorizationCode: string, redirectURI: string): Promise<User>;
    checkIfRefreshTokenExpired(): boolean;
    deleteCurtainLink(curtainLinkID: string): Promise<import("axios").AxiosResponse<any, any>>;
    putSettings(settings: any, enable?: boolean, description?: string, sessionType?: string, onUploadProgress?: any): Promise<import("axios").AxiosResponse<any, any>>;
    postSettings(id: string, token: string, onDownloadProgress?: any): Promise<import("axios").AxiosResponse<any, any>>;
    getPrideData(accession: string): Promise<import("axios").AxiosResponse<any, any>>;
    generateTemporarySession(linkId: string, lifetime: number): Promise<import("axios").AxiosResponse<any, any>>;
    updateSession(sessionData: any, linkId: string): Promise<import("axios").AxiosResponse<any, any>>;
    getSessionSettings(linkId: string): Promise<import("axios").AxiosResponse<any, any>>;
    getOwnership(linkId: string): Promise<import("axios").AxiosResponse<any, any>>;
    getOwners(linkId: string): Promise<import("axios").AxiosResponse<any, any>>;
    addOwner(linkId: string, owner: string): Promise<import("axios").AxiosResponse<any, any>>;
    getCurtainLinks(username: string, sessionDescription?: string, offset?: number, sessionType?: string): Promise<import("axios").AxiosResponse<any, any>>;
    getSiteProperties(): Promise<import("axios").AxiosResponse<any, any>>;
    saveDataFilterList(name: string, data: string, category?: string): Promise<import("axios").AxiosResponse<any, any>>;
    getDataFilterListByID(id: number): Promise<import("axios").AxiosResponse<any, any>>;
    getDataFilterList(title?: string, searchTerm?: string, category?: string, limit?: number): Promise<import("axios").AxiosResponse<any, any>>;
    getDataFilterListByCategory(category: string): Promise<import("axios").AxiosResponse<any, any>>;
    deleteDataFilterList(id: number): Promise<import("axios").AxiosResponse<any, any>>;
    downloadStats(): Promise<import("axios").AxiosResponse<any, any>>;
    postInteractomeAtlasProxy(genes: string[], filterParameter: string): Promise<import("axios").AxiosResponse<any, any>>;
    postPrimitiveStatsTest(data: any, type?: string): Promise<import("axios").AxiosResponse<any, any>>;
    getDataAllListCategory(): Promise<import("axios").AxiosResponse<any, any>>;
}
